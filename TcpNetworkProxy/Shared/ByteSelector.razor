@using System.ComponentModel
@using TcpNetworkProxy.Extensions

@if (NetworkEntry is null)
{
    <MudText>No network packet selected.</MudText>
}
else
{
    <div class="hex-string">
        @foreach (var hex in _hexadecimals)
        {
            <span class="hex-byte @(hex.IsSelected ? "highlighted" : string.Empty)"
                  @onclick="() => SelectBytes(hex)">
                @hex.ToString()
            </span>
        }
    </div>
}

@code {

    [Parameter]
    public EventCallback<IReadOnlyCollection<HexadecimalViewModel>> OnBytesSelected { get; set; }

    [Parameter]
    public DataTypeViewModel DataType { get; set; }

    [Parameter]
    public NetworkEntryViewModel NetworkEntry { get; set; }

    private List<HexadecimalViewModel> _hexadecimals = new();
    private int _selectedByteIndex;

    private Type _previousDataType;
    private string _previousHexString;
    
    protected override void OnParametersSet()
    {
        if (NetworkEntry is null || _previousHexString == NetworkEntry.Data.ToHexadecimalString() && _previousDataType == DataType?.Type)
        {
            return;
        }
        
        _hexadecimals = NetworkEntry.Data.Select((b, i) => new HexadecimalViewModel { Index = i, Byte = b, IsSelected = false }).ToList();

        if (_selectedByteIndex > _hexadecimals.Count)
        {
            ResetByteSelection(); 
        }

        SelectBytes(_hexadecimals[_selectedByteIndex]);
        
        _previousDataType = DataType?.Type;
        _previousHexString = NetworkEntry.Data.ToHexadecimalString();
    }

    private void SelectBytes(HexadecimalViewModel hexadecimalViewModel)
    {
        ResetByteSelection();

        if (DataType == null)
        {
            return;
        }

        _selectedByteIndex = hexadecimalViewModel.Index;
        var hexIndexRange = hexadecimalViewModel.Index + DataType.SizeInBytes;
        if (hexIndexRange > _hexadecimals.Count)
        {
            return;
        }

        for (var i = hexadecimalViewModel.Index; i < hexIndexRange; i++)
        {
            _hexadecimals[i].IsSelected = true;
        }

        var selectedHexBytes = _hexadecimals.Where(h => h.IsSelected).ToArray();
        if (OnBytesSelected.HasDelegate)
        {
            OnBytesSelected.InvokeAsync(selectedHexBytes);
        }
    }

    private void ResetByteSelection()
    {
        _selectedByteIndex = 0;

        foreach (var hex in _hexadecimals.Where(hex => hex.IsSelected))
        {
            hex.IsSelected = false;
        }
    }

}