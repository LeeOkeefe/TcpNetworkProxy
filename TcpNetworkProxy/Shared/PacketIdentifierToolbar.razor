@if (SelectedNetworkEntry is not null)
{
    <MudPaper Elevation="0">
        @if (SelectedBytes is not null)
        {
            <MudGrid>
                <MudItem md="2">
                    <MudButton FullWidth StartIcon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" Disabled="@(IsBitShiftDisabled(BitShift.Left))" OnClick="@(() => ShiftBits(BitShift.Left))"
                               IconColor="Color.Secondary" Variant="Variant.Text" Color="Color.Primary" Class="py-0">
                        Shift Left
                    </MudButton>
                </MudItem>
                <MudItem md="8">
                    <MudStack Row Justify="Justify.SpaceEvenly">
                        <MudText Typo="Typo.button" Align="Align.Center">Little Endian: @_littleEndian</MudText>
                        <MudText Typo="Typo.button" Align="Align.Center">Shifted: @_shiftAmount</MudText>
                        <MudText Typo="Typo.button" Align="Align.Center">Big Endian: @_bigEndian</MudText>
                    </MudStack>
                </MudItem>
                <MudItem md="2">
                    <MudButton FullWidth EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Disabled="@IsBitShiftDisabled(BitShift.Right)" OnClick="@(() => ShiftBits(BitShift.Right))"
                               IconColor="Color.Secondary" Variant="Variant.Text" Color="Color.Primary" Class="py-0">
                        Shift Right
                    </MudButton>
                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudText Color="Color.Error">No hexadecimal bytes selected.</MudText>
        }
    </MudPaper>
}

@code {

    [Parameter]
    public NetworkEntryViewModel SelectedNetworkEntry { get; set; }
    
    [Parameter]
    public DataTypeViewModel SelectedDataType { get; set; }
    
    [Parameter]
    public IReadOnlyCollection<HexadecimalViewModel> SelectedBytes { get; set; }

    private NetworkEntryViewModel _previousNetworkEntry;
    private IReadOnlyCollection<HexadecimalViewModel> _previousBytes;

    private const int MaxShift = 32;
    private long _bigEndian;
    private long _littleEndian;
    private int _shiftAmount;

    protected override void OnParametersSet()
    {
        var hasNetworkEntryChanged = SelectedNetworkEntry != _previousNetworkEntry;
        var haveBytesChanged = !Equals(SelectedBytes, _previousBytes);

        _previousNetworkEntry = SelectedNetworkEntry;
        _previousBytes = SelectedBytes;

        if (hasNetworkEntryChanged || haveBytesChanged)
        {
            Reset();
            if (SelectedBytes is not null)
            {
                SetEndianness();
            }
        }
        base.OnParametersSet();
    }

    private void Reset()
    {
        _shiftAmount = 0;
        _littleEndian = 0;
        _bigEndian = 0;
    }

    private void SetEndianness()
    {
        var orderedBytes = GetOrderedBytes();

        _littleEndian = ConvertToLong(orderedBytes, true);
        _bigEndian = ConvertToLong(orderedBytes, false);
    }

    private void ShiftBits(BitShift direction)
    {
        if (_shiftAmount is -MaxShift or MaxShift)
        {
            return;
        }
        
        _shiftAmount += direction == BitShift.Left ? -1 : 1;

        if (direction == BitShift.Left && _shiftAmount >= -MaxShift)
        {
            _littleEndian <<= 1;
            _bigEndian <<= 1;
        }
        else if (direction == BitShift.Right && _shiftAmount <= MaxShift)
        {
            _littleEndian >>= 1;
            _bigEndian >>= 1;
        }
    }
    
    private byte[] GetOrderedBytes()
    {
        return SelectedBytes
            .OrderBy(b => b.Index)
            .Select(b => b.Byte)
            .ToArray();
    }
    
    private long ConvertToLong(byte[] bytes, bool isLittleEndian)
    {
        if (BitConverter.IsLittleEndian != isLittleEndian)
        {
            Array.Reverse(bytes);
        }

        var paddedBytes = new byte[8];
        Array.Copy(bytes, paddedBytes, bytes.Length);

        return BitConverter.ToInt64(paddedBytes, 0);
    }

    private bool IsBitShiftDisabled(BitShift direction)
    {
        if (Math.Abs(_shiftAmount) == MaxShift)
        {
            return true;
        }

        return direction switch
        {
            BitShift.Left => _shiftAmount > 0,
            BitShift.Right => _shiftAmount < 0,
            _ => true
        };
    }
}