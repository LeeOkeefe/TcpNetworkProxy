@using System.Text
<MudCard Style="height: 100%">
    <MudCardContent>
        <MudSelect T="DataTypeViewModel" @bind-Value="@_selectedDataType" ToStringFunc="@_getDataTypeName" Label="Select data type" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Class="my-5">
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(sbyte), SizeInBytes = sizeof(sbyte) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(byte), SizeInBytes = sizeof(byte) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(short), SizeInBytes = sizeof(short) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(ushort), SizeInBytes = sizeof(ushort) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(int), SizeInBytes = sizeof(int) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(uint), SizeInBytes = sizeof(uint) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(long), SizeInBytes = sizeof(long) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(ulong), SizeInBytes = sizeof(ulong) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(char), SizeInBytes = sizeof(char) })"/>
        </MudSelect>
        @if (_selectedDataType?.Type == typeof(char))
        {
            <span>@Encoding.ASCII.GetString(SelectedNetworkEntry.Data)</span>
        }
        else
        {
            <PacketIdentifierToolbar SelectedNetworkEntry="@SelectedNetworkEntry" SelectedDataType="@_selectedDataType" SelectedBytes="@_selectedBytes"/>
        }
        <MudDivider Class="my-4"/>
        <ByteSelector DataType="_selectedDataType" NetworkEntry="@SelectedNetworkEntry" OnBytesSelected="@HandleOnBytesSelected"/>
    </MudCardContent>
</MudCard>

@code {

    [Parameter]
    public NetworkEntryViewModel SelectedNetworkEntry { get; set; }

    private DataTypeViewModel _selectedDataType;

    Func<DataTypeViewModel, string> _getDataTypeName = dataType => dataType?.Type.Name;

    private IReadOnlyCollection<HexadecimalViewModel> _selectedBytes;

    private void HandleOnBytesSelected(IReadOnlyCollection<HexadecimalViewModel> bytes)
    {
        _selectedBytes = bytes;
    }

}