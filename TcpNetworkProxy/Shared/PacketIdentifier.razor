<MudCard>
    <MudCardContent>
        <MudSelect T="DataTypeViewModel" @bind-Value="@_selectedDataType" ToStringFunc="@_getDataTypeName" Label="Select data type" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Class="my-5">
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(byte), SizeInBytes = sizeof(byte) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(short), SizeInBytes = sizeof(short) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(int), SizeInBytes = sizeof(int) })"/>
            <MudSelectItem Value="@(new DataTypeViewModel { Type = typeof(long), SizeInBytes = sizeof(long) })"/>
        </MudSelect>
        <PacketIdentifierToolbar SelectedNetworkEntry="@SelectedNetworkEntry" SelectedDataType="@_selectedDataType" SelectedBytes="@_selectedBytes"/>
        <MudDivider Class="my-3"/>
        <ByteSelector DataType="_selectedDataType" NetworkEntry="@SelectedNetworkEntry" OnBytesSelected="@HandleOnBytesSelected"/>
    </MudCardContent>
</MudCard>

@code {

    [Parameter]
    public NetworkEntryViewModel SelectedNetworkEntry { get; set; }

    private DataTypeViewModel _selectedDataType;

    Func<DataTypeViewModel, string> _getDataTypeName = dataType => dataType?.Type.Name;

    private IReadOnlyCollection<HexadecimalViewModel> _selectedBytes;

    private void HandleOnBytesSelected(IReadOnlyCollection<HexadecimalViewModel> bytes)
    {
        _selectedBytes = bytes;
    }

}