@using TcpNetworkProxy.Data
@using TcpNetworkProxy.Extensions

@inject NetworkViewModel Model
@inject IJSRuntime JsRuntime

<MudTable Items="@NetworkEntries" OnRowClick="@OnNetworkEntryClicked" RowClassFunc="@SelectedRowClassFunc"
          @ref="_mudTable" RowClass="cursor-pointer" Height="650px"
          Virtualize Hover Dense FixedHeader>
    <ColGroup>
        <col style="width: 10%"/>
        <col style="width: 10%"/>
        <col style="width: 30%"/>
        <col style="width: 10%"/>
        <col style="width: 40%"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel
                SortBy="@(new Func<NetworkEntryViewModel, object>(n => n.Timestamp))"
                InitialDirection="SortDirection.Descending">
                Timestamp
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Source</MudTh>
        <MudTh>Destination</MudTh>
        <MudTh>Data Size</MudTh>
        <MudTh>Data Preview</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Timestamp">@context.Timestamp.ToLongTimeString()</MudTd>
        <MudTd DataLabel="Source">@context.Source</MudTd>
        <MudTd DataLabel="Destination">@context.Destination</MudTd>
        <MudTd DataLabel="Data Size">@context.Data.Length</MudTd>
        <MudTd DataLabel="Data Preview">@context.Data.ToHexadecimalString(25)</MudTd>
    </RowTemplate>
</MudTable>

@code {

    [Parameter]
    public IReadOnlyList<NetworkEntryViewModel> NetworkEntries { get; set; }

    [Parameter]
    public EventCallback<TableRowClickEventArgs<NetworkEntryViewModel>> OnNetworkEntryClicked { get; set; }

    private MudTable<NetworkEntryViewModel> _mudTable;

    private string SelectedRowClassFunc(NetworkEntryViewModel element, int rowNumber)
    {
        return _mudTable.SelectedItem == element ? "selected" : string.Empty;
    }

}