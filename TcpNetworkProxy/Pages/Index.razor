@page "/"
@using System.Net
@using TcpNetworkProxy.Data

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center mud-width-full" style="height:100vh;">
    <MudGrid>
        <MudItem xs="12" sm="8" md="8">
            <MudTextField @bind-Value="@Proxy.IpAddress" Placeholder="127.0.0.1" Label="Proxy IP"
                          Variant="Variant.Outlined" Margin="Margin.Dense"
                          Validation="@(new Func<string, IEnumerable<string>>(IsIpAddressValid))"/>
        </MudItem>
        <MudItem xs="12" sm="4" md="4">
            <MudNumericField @bind-Value="Proxy.Port" Label="Proxy Port" HideSpinButtons
                             Variant="Variant.Outlined" Margin="Margin.Dense"
                             Min="ushort.MinValue" Max="ushort.MaxValue"/>
        </MudItem>
        <MudItem xs="12" sm="8" md="8">
            <MudTextField @bind-Value="Destination.IpAddress" Placeholder="127.0.0.1" Label="Destination IP"
                          Variant="Variant.Outlined" Margin="Margin.Dense"
                          Validation="@(new Func<string, IEnumerable<string>>(IsIpAddressValid))"/>
        </MudItem>
        <MudItem xs="12" sm="4" md="4">
            <MudNumericField @bind-Value="Destination.Port" HideSpinButtons Label="Destination Port"
                             Variant="Variant.Outlined" Margin="Margin.Dense"
                             Min="ushort.MinValue" Max="ushort.MaxValue"/>
        </MudItem>
        <MudItem xs="12" sm="8" md="8">
            <MudButton Color="Color.Primary" EndIcon="@Icons.Material.Rounded.PlayArrow" Variant="Variant.Outlined" FullWidth>
                Capture Traffic
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private Connection Proxy { get; } = new();
    private Connection Destination { get; } = new();

    private IEnumerable<string> IsIpAddressValid(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            yield return "Required";

        if (!IPAddress.TryParse(input, out _) || input?.Count(c => c == '.') != 3)
            yield return "Invalid";
    }
}