@page "/Network/{host}/{port:int}/{destinationHost}/{destinationPort:int}"

@inject NetworkViewModel Model
@implements IDisposable


<NetworkListings NetworkEntries="@Model.GetNetworkEntriesSnapshot()" OnNetworkEntryClicked="@HandleOnClick"/>

@code {
    [Parameter] public string Host { get; set; }
    [Parameter] public int Port { get; set; }
    [Parameter] public string DestinationHost { get; set; }
    [Parameter] public int DestinationPort { get; set; }
    
    protected override void OnInitialized()
    {
        Model.StartProxyServer(Host, Port, DestinationHost, DestinationPort);
        Model.OnUpdateRequested += InvokeStateChangedAsync;
    }

    public void Dispose()
    {
        Model.OnUpdateRequested -= InvokeStateChangedAsync;
        Model.Dispose();
    }

    private async void InvokeStateChangedAsync() => await InvokeAsync(StateHasChanged);
    
    private async Task HandleOnClick(TableRowClickEventArgs<NetworkEntryViewModel> eventArgs)
    {
        // TODO:
        // Open / populate packet editor, inspector etc.
    }
}